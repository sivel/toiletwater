- hosts: testhost
  gather_subset:
    - '!min'
    - platform
  vars:
    _arch_map:
      x86_64: amd64
    _ansible_system: '{{ ansible_facts.system|lower }}'
    _ansible_arch: '{{ _arch_map.get(ansible_facts.architecture, ansible_facts.architecture) }}'
  tasks:
    - foo.bar.helloworld:
        name: sivel
      register: result

    - foo.bar.helloworld:
        name: sivel
      delegate_to: localhost

    - sivel.toiletwater.exec_binary_module:
        module: foo.bar.helloworld

    - sivel.toiletwater.exec_binary_module:
        module: foo.bar.helloworld
        arch: auto
        system: auto

    - sivel.toiletwater.exec_binary_module:
        module: foo.bar.helloworld
        arch: '{{ _ansible_arch }}'

    - sivel.toiletwater.exec_binary_module:
        module: foo.bar.helloworld
        system: '{{ _ansible_system }}'

    - sivel.toiletwater.exec_binary_module:
        module: foo.bar.helloworld
        system: foo
        arch: bar
      register: result2
      ignore_errors: true

    - assert:
        that:
          - result.msg == 'Hello, sivel!'
          - result._system == _ansible_system
          - result._architecture == _ansible_arch
          - result._module == 'foo.bar.helloworld_{_ansible_system}_{_ansible_arch}'.format(_ansible_system=_ansible_system, _ansible_arch=_ansible_arch)

          - result2 is failed
          - result2.msg == 'Could not find a binary module implementation of foo.bar.helloworld for foo bar.'

- hosts: testhost
  gather_facts: false
  tasks:
    - foo.bar.helloworld:
        name: sivel
